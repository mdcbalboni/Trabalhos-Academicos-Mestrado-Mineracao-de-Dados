#cm <- confusionMatrix(predicoes, as.factor(dados_teste$Recusado), mode="prec_recall")
#cm
resultado1 = predict(modelo,dados_teste)
confusao1 = confusionMatrix(resultado1,as.factor(dados_teste$Recusado),mode="prec_recall")
#predicoes <- predict(modelo_c, dados_teste)
#cm <- confusionMatrix(predicoes, as.factor(dados_teste$Recusado), mode="prec_recall")
#cm
resultado1 = predict(modelo,dados_teste)
confusao1 = confusionMatrix(resultado1,dados_teste$Recusado,mode="prec_recall")
#predicoes <- predict(modelo_c, dados_teste)
#cm <- confusionMatrix(predicoes, as.factor(dados_teste$Recusado), mode="prec_recall")
#cm
resultado1 = predict(modelo,dados_teste)
confusao1 = confusionMatrix(resultado1,as.factor(dados_teste$Recusado))
confusao1
#predicoes <- predict(modelo_c, dados_teste)
cm <- confusionMatrix(predicoes, as.factor(dados_teste$Recusado), mode="prec_recall")
#predicoes <- predict(modelo_c, dados_teste)
#cm <- confusionMatrix(predicoes, as.factor(dados_teste$Recusado), mode="prec_recall")
#cm
resultado1 = predict(modelo,dados_teste)
confusao1 = confusionMatrix(resultado1,as.factor(dados_teste$Recusado),mode="prec_recall")
View(testeData)
View(treinoData)
View(dados_teste)
View(dados_treino)
#modelLookup("rpart")
#params_treino <- trainControl(method = "cv", number = 5, sampling = "up", savePredictions = TRUE, classProbs = TRUE, dados)
#modelo_c <- train(Recusado ~ ., data = as.data.frame(dados_treino), trControl = params_treino, method = "rpart", tuneLength = 5)
modelLookup("rpart")
params_treino <- trainControl(method = "cv", number = 5, sampling = "up", savePredictions = TRUE, classProbs = TRUE, seeds = set.seed(1),)
modelo <- train(Recusado ~ ., data = dados_treino, trControl = params_treino, parms = list(split = "information"), tuneLength = 5)
#predicoes <- predict(modelo_c, dados_teste)
#cm <- confusionMatrix(predicoes, as.factor(dados_teste$Recusado), mode="prec_recall")
#cm
resultado1 = predict(modelo,dados_teste)
confusao1 = confusionMatrix(resultado1,as.factor(dados_teste$Recusado),mode="prec_recall")
library(caret)
library(rpart)
library(rpart.plot)
library(parallel)
library(iterators)
library(foreach)
library(lattice)
library(ggplot2)
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Datasets//Fifa_Final.csv', sep=",")
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//Fifa_Final.csv', sep=",")
entrada$X <- NULL
entrada$Value[entrada$Value == "Menor que 4700"] = "Entre 4700 e 5700"
entrada$Value[entrada$Value == "Entre 4700 e 5700"] = "Menor que 5700"
p <- 0.75
set.seed(1)
inTraining <- sample.int(n = nrow(entrada),
size = floor(p * nrow(entrada)),
replace = FALSE)
treinoData <- entrada[inTraining, ]
testeData <- entrada[-inTraining, ]
modelo1 = rpart(
formula = treinoData$Value ~ .,
data=treinoData,
parms = list(split = "information"),
cp = 0.002,
control = rpart.control(
sampling = "up",
minsplit = 1,
minbucket = 1,
maxdepth = 30)
)
resultado1 = predict(modelo1,testeData,type = "class")
confusao1 = confusionMatrix(resultado1,as.factor(testeData$Value),mode="prec_recall")
library(caret)
library(rpart)
library(rpart.plot)
library(parallel)
library(iterators)
library(foreach)
library(lattice)
library(ggplot2)
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//Fifa_Final.csv', sep=",")
entrada$X <- NULL
entrada$Value[entrada$Value == "Menor que 4700"] = "Entre 4700 e 5700"
entrada$Value[entrada$Value == "Entre 4700 e 5700"] = "Menor que 5700"
p <- 0.75
set.seed(1)
inTraining <- sample.int(n = nrow(entrada),
size = floor(p * nrow(entrada)),
replace = FALSE)
treinoData <- entrada[inTraining, ]
testeData <- entrada[-inTraining, ]
modelo1 = rpart(
formula = treinoData$Value ~ .,
data=treinoData,
parms = list(split = "information"),
cp = 0.002,
control = rpart.control(
sampling = "up",
minsplit = 1,
minbucket = 1,
maxdepth = 30)
)
resultado1 = predict(modelo1,testeData,type = "class")
confusao1 = confusionMatrix(resultado1,as.factor(testeData$Value),mode="prec_recall")
resultado1 = predict(modelo1,testeData,type = "class")
confusao1 = confusionMatrix(resultado1,as.factor(testeData$Value),mode="prec_recall")
library(caret)
library(rpart)
library(rpart.plot)
library(parallel)
library(iterators)
library(foreach)
library(lattice)
library(ggplot2)
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Datasets//Fifa_Final.csv', sep=",")
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//Fifa_Final.csv', sep=",")
entrada$X <- NULL
library(caret)
library(rpart)
library(rpart.plot)
library(parallel)
library(iterators)
library(foreach)
library(lattice)
library(ggplot2)
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//Fifa_Final.csv', sep=",")
entrada$X <- NULL
entrada$Value[entrada$Value == "Menor que 4700"] = "Entre 4700 e 5700"
entrada$Value[entrada$Value == "Entre 4700 e 5700"] = "Menor que 5700"
p <- 0.75
set.seed(1)
inTraining <- sample.int(n = nrow(entrada),
size = floor(p * nrow(entrada)),
replace = FALSE)
treinoData <- entrada[inTraining, ]
testeData <- entrada[-inTraining, ]
modelo1 = rpart(
formula = treinoData$Value ~ .,
data=treinoData,
parms = list(split = "information"),
cp = 0.002,
control = rpart.control(
sampling = "up",
minsplit = 1,
minbucket = 1,
maxdepth = 30)
)
resultado1 = predict(modelo1,testeData,type = "class")
confusao1 = confusionMatrix(resultado1,as.factor(testeData$Value),mode="prec_recall")
confusao1
#install.packages("kernlab")
#install.packages("Metrics")
#install.packages("esquisse")
#install.packages("monomvn")
#install.packages("leaps")
library(neuralnet)
library(caret)
library(rpart)
library(rpart.plot)
library(foreign)
library(mlbench)
library(randomForest)
library(kernlab)
library(Metrics)
library(esquisse)
library(elasticnet)
library(monomvn)
library(ggplot2)
library(leaps)
library(parallel)
library(iterators)
library(foreach)
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//RPDB_pos_python.csv', sep=",")
library(doParallel)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
set.seed(100)
proporcao=0.8
random = createDataPartition(entrada$pKd,p=proporcao,list=FALSE)
treinoData =  entrada[random,]
testeData =  entrada[-random,]
entrada[entrada == ""] <- 0
modelo1 = train(pKd ~ BalabanJ + D4 + NN115 + NN119 + NN124 + NN138 + NN161 + NN162 + NN172 + PBF + PMI1 + D34 + NN132 + S8 + F18 + F21 + F22 + F23 + F25 + F26 + F27 + F28 + F29 + F30 + F31 + F32 + F33 + R + D5 + NN192, data = treinoData2, method = "svmLinear")
modelo2 = train(pKd ~ F58+NN3+NN4+NN29+NN51+NN62+NN219+NN233+NN234+NN285+NN313+Chi4v+NumBridgeheadAtoms+PEOE_VSA6+SMR_VSA6+SlogP_VSA5+S1+S5+S10+F2+F3+F43+F44+F45+F46+F47+F49+F50+F51+
F55+F56+NN28+NN50+NN61+NN161+NN232+NN284+nBondsM+n4Ring+nF8Ring+nT4Ring+nT8Ring+nTG12Ring+
n4HeteroRing+nF8HeteroRing+nT4HeteroRing+nT8HeteroRing+nTG12HeteroRing+SlogP_VSA7+EState_VSA1+
nG12Ring+nF10Ring+nF11Ring+nF12Ring+nFG12Ring+nT10Ring+nT11Ring+nT12Ring+nF10HeteroRing+nF11HeteroRing+nF12HeteroRing+nT10HeteroRing+nT11HeteroRing+nT12HeteroRing+NumSaturatedRings+NumSpiroAtoms+LabuteASA+PEOE_VSA9+SMR_VSA1+VSA_EState6+MQNs_topology_counts_rgIO+NN9+NN45+NN47+NN52+
NN60+NN100+NN106+NN229+NN231+PEOE_VSA10+SMR_VSA2+SlogP_VSA6, data = treinoData, method = "svmLinear")
modelo3 = train(pKd ~ F58+NN3+NN4+NN29+NN51+NN62+NN219+NN233+NN234+NN285+NN313+Chi4v+NumBridgeheadAtoms+PEOE_VSA6+SMR_VSA6+SlogP_VSA5+S1+S5+S10+F2+F3+F43+F44+F45+F46+F47+F49+F50+F51+
F55+F56+NN28+NN50+NN61+NN161+NN232+NN284+nBondsM+n4Ring+nF8Ring+nT4Ring+nT8Ring+nTG12Ring+
n4HeteroRing+nF8HeteroRing+nT4HeteroRing+nT8HeteroRing+nTG12HeteroRing+SlogP_VSA7+EState_VSA1+
nG12Ring+nF10Ring+nF11Ring+nF12Ring+nFG12Ring+nT10Ring+nT11Ring+nT12Ring+nF10HeteroRing+nF11HeteroRing+nF12HeteroRing+nT10HeteroRing+nT11HeteroRing+nT12HeteroRing+NumSaturatedRings+NumSpiroAtoms+LabuteASA+PEOE_VSA9+SMR_VSA1+VSA_EState6+MQNs_topology_counts_rgIO+NN9+NN45+NN47+NN52+
NN60+NN100+NN106+NN229+NN231+PEOE_VSA10+SMR_VSA2+SlogP_VSA6, data = treinoData, method = "enet")
modelo4 = train(pKd ~ NN1+NN2+NN47+NN60+NN74+NN89+NN90+NN97+NN100+NN105+NN117+NN194+NN215+NN216+NN254+NN278+NN294+NN296+nBonds+nBondsS+nRing+n4Ring+nFRing+nF5Ring+nFG12Ring+nTRing+nT4Ring+nTG12Ring+n4HeteroRing+nF5HeteroRing+nFG12HeteroRing+nT4HeteroRing+nTG12HeteroRing+BertzCT+Chi2n+Chi3n+Chi4n+MolMR+NumSpiroAtoms+PEOE_VSA9+EState_VSA1+MQNs_topology_counts_r3+MQNs_topology_counts_r4+InertialShapeFactor+F2+F6+F7+F8+F9+F10+F11+F12+F13+F14+F15+F16+F17+F18+F19+F20+F21+F22+F23+F24+F25+F26+F27+F28+F29+F30+F31+F32+F33+F34+F35+F49+F56, data = treinoData, method = "svmLinear")
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
rrse4 = rrse(testeData$pKd,teste4)
rmse4
rrse4
qplot(testeData$pKd,teste4, col=ifelse(abs(testeData$pKd-teste4) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
modelo5 = train(pKd ~ NN1+NN2+NN47+NN60+NN74+NN89+NN90+NN97+NN100+NN105+NN117+NN194+NN215+NN216+NN254+NN278+NN294+NN296+nBonds+nBondsS+nRing+n4Ring+nFRing+nF5Ring+nFG12Ring+nTRing+nT4Ring+nTG12Ring+n4HeteroRing+nF5HeteroRing+nFG12HeteroRing+nT4HeteroRing+nTG12HeteroRing+BertzCT+Chi2n+Chi3n+Chi4n+MolMR+NumSpiroAtoms+PEOE_VSA9+EState_VSA1+MQNs_topology_counts_r3+MQNs_topology_counts_r4+InertialShapeFactor+F2+F6+F7+F8+F9+F10+F11+F12+F13+F14+F15+F16+F17+F18+F19+F20+F21+F22+F23+F24+F25+F26+F27+F28+F29+F30+F31+F32+F33+F34+F35+F49+F56, data = treinoData, method = "enet")
f2<- as.formula("pKd ~ NN1+NN2+NN47+NN60+NN74+NN89+NN90+NN97+NN100+NN105+NN117+NN194+NN215+NN216+NN254+NN278+NN294+NN296+nBonds+nBondsS+nRing+n4Ring+nFRing+nF5Ring+nFG12Ring+nTRing+nT4Ring+nTG12Ring+n4HeteroRing+nF5HeteroRing+nFG12HeteroRing+nT4HeteroRing+nTG12HeteroRing+BertzCT+Chi2n+Chi3n+Chi4n+MolMR+NumSpiroAtoms+PEOE_VSA9+EState_VSA1+MQNs_topology_counts_r3+MQNs_topology_counts_r4+InertialShapeFactor+F2+F6+F7+F8+F9+F10+F11+F12+F13+F14+F15+F16+F17+F18+F19+F20+F21+F22+F23+F24+F25+F26+F27+F28+F29+F30+F31+F32+F33+F34+F35+F49+F56")
rn2 <- neuralnet(f2,
treinoData,
threshold = 0.5,
hidden = c(50,50))
modelo6 = train(pKd ~ EState_VSA1+MolLogP+I+pKd+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180, data = treinoData, method = "svmLinear")
modelo7 = train(pKd ~ EState_VSA1+MolLogP+I+pKd+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180, data = treinoData, method = "enet")
f3<- as.formula("pKd ~ EState_VSA1+MolLogP+I+pKd+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180")
rn3 <- neuralnet(f3,
treinoData,
threshold = 0.1,
hidden = c(50,50))
modelo8 = train(pKd ~ EState_VSA1+MolLogP+I+vina+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180, data = treinoData, method = "svmLinear")
modelo9 = train(pKd ~ EState_VSA1+MolLogP+I+vina+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180, data = treinoData, method = "enet")
f4<- as.formula("pKd ~ EState_VSA1+MolLogP+I+vina+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180")
rn4 <- neuralnet(f4,
treinoData,
threshold = 0.1,
hidden = c(77,77))
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
cor(testeData$pKd,teste4,method = "pearson")
rrse4 = rrse(testeData$pKd,teste4)
rmse4
rrse4
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
cor(testeData$pKd,teste4,method = "pearson")
rrse4 = rrse(testeData$pKd,teste4)
rmse4
#rrse4
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
cor(testeData$pKd,teste5,method = "pearson")
rrse5 = rrse(testeData$pKd,teste5)
rmse5
#rrse5
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
cor(testeData$pKd,teste5,method = "pearson")
rrse5 = rrse(testeData$pKd,teste5)
rmse5
rrse5
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
cor(testeData$pKd,teste5,method = "pearson")
rrse5 = rrse(teste5,testeData$pKd)
rmse5
rrse5
teste5 = predict(modelo5, testeData)
rmse5 = rmse(teste5,testeData$pKd)
cor(testeData$pKd,teste5,method = "pearson")
rrse5 = rrse(teste5,testeData$pKd)
rmse5
rrse5
qplot(testeData$pKd,teste5, col=ifelse(abs(testeData$pKd-teste5) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
qplot(testeData$pKd,teste4, col=ifelse(abs(testeData$pKd-teste4) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
cor(testeData$pKd,teste4,method = "pearson")
rrse4 = rrse(testeData$pKd,teste4)
rmse4
#rrse4
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
cor(testeData$pKd,teste4,method = "pearson")
rrse4 = rrse(testeData$pKd,teste4)
rmse4
rrse4
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
cor(testeData$pKd,teste4,method = "pearson")
rrse4 = rrse(testeData$pKd,teste4)
rmse4
rrse4
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
rrse4 = rrse(testeData$pKd,teste4)
rmse4
cor(testeData$pKd,teste4,method = "pearson")
rrse4
teste4 = predict(modelo4, testeData)
rmse4 = rmse(testeData$pKd,teste4)
rrse4 = rrse(teste4,testeData$pKd)
rmse4
cor(testeData$pKd,teste4,method = "pearson")
rrse4
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
rrse5 = rrse(teste5,testeData$pKd)
rmse5
cor(testeData$pKd,teste5,method = "pearson")
rrse5
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
rrse5 = rrse(teste5,testeData$pKd)
rmse5
cor(testeData$pKd,teste5,method = "pearson")
rrse5
RNrmse2 = rmse(testeData$pKd,previsao2$net.result)
previsao2 = compute(rn2,testeData)
RNrmse2 = rmse(testeData$pKd,previsao2$net.result)
RNrrse2 = rrse(previsao2$net.result,testeData$pKd)
RNrmse2
cor(testeData$pKd,teste6,method = "pearson")
RNrmse2 = rmse(testeData$pKd,previsao2$net.result)
RNrrse2 = rrse(previsao2$net.result,testeData$pKd)
RNrmse2
cor(testeData$pKd,previsao2$net.result,method = "pearson")
RNrrse2
RNrmse2 = rmse(testeData$pKd,previsao2$net.result)
RNrrse2 = rrse(previsao2$net.result,testeData$pKd)
RNrmse2
cor(testeData$pKd,previsao2$net.result,method = "pearson")
RNrrse2
RNrmse2 = rmse(testeData$pKd,previsao2$net.result)
RNrrse2 = rrse(previsao2$net.result,testeData$pKd)
RNrmse2
#cor(testeData$pKd,previsao2$net.result,method = "pearson")
RNrrse2
RNrmse2 = rmse(testeData$pKd,previsao2$net.result)
RNrrse2 = rrse(previsao2$net.result,testeData$pKd)
RNrmse2
cor(testeData$pKd,previsao2$net.result,method = "pearson")
RNrrse2
qplot(testeData$pKd,previsao2$net.result, col=ifelse(abs(testeData$pKd-previsao2$net.result) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
rrse5 = rrse(teste5,testeData$pKd)
rmse5
cor(testeData$pKd,teste5,method = "pearson")
rrse5
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
rrse5 = rrse(teste5,testeData$pKd)
rmse5
cor(teste5,testeData$pKd,method = "pearson")
rrse5
teste5 = predict(modelo5, testeData)
rmse5 = rmse(testeData$pKd,teste5)
rrse5 = rrse(teste5,testeData$pKd)
rmse5
cor(testeData$pKd,teste5,method = "pearson")
rrse5
teste6 = predict(modelo6, testeData)
rmse6 = rmse(testeData$pKd,teste6)
rrse6 = rrse(teste6,testeData$pKd)
rmse6
cor(testeData$pKd,teste6,method = "pearson")
rrse6
teste6 = predict(modelo6, testeData)
rmse6 = rmse(testeData$pKd,teste6)
rrse6 = rrse(teste6,testeData$pKd)
rmse6
cor(testeData$pKd,teste6,method = "pearson")
rrse6
qplot(testeData$pKd,teste6, col=ifelse(abs(testeData$pKd-teste6) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
modelo6 = train(pKd ~ EState_VSA1+MolLogP+I+pKd+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180, data = treinoData, method = "svmLinear")
teste6 = predict(modelo6, testeData)
rmse6 = rmse(testeData$pKd,teste6)
rrse6 = rrse(teste6,testeData$pKd)
rmse6
cor(testeData$pKd,teste6,method = "pearson")
rrse6
teste6 = predict(modelo6, testeData)
rmse6 = rmse(testeData$pKd,teste6)
#rrse6 = rrse(teste6,testeData$pKd)
rmse6
#cor(testeData$pKd,teste6,method = "pearson")
#rrse6
modelo6 = train(pKd ~ EState_VSA1+MolLogP+I+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180, data = treinoData, method = "svmLinear")
teste6 = predict(modelo6, testeData)
rmse6 = rmse(testeData$pKd,teste6)
#rrse6 = rrse(teste6,testeData$pKd)
rmse6
#cor(testeData$pKd,teste6,method = "pearson")
#rrse6
teste6 = predict(modelo6, testeData)
rmse6 = rmse(testeData$pKd,teste6)
rrse6 = rrse(teste6,testeData$pKd)
rmse6
cor(testeData$pKd,teste6,method = "pearson")
rrse6
teste7 = predict(modelo7, testeData)
rmse7 = rmse(testeData$pKd,teste7)
rrse7 = rrse(teste7,testeData$pKd)
rmse7
cor(testeData$pKd,teste7,method = "pearson")
rrse7
qplot(testeData$pKd,teste6, col=ifelse(abs(testeData$pKd-teste6) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
qplot(testeData$pKd,teste7, col=ifelse(abs(testeData$pKd-teste7) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
previsao3 = compute(rn3,testeData)
RNrmse3 = rmse(testeData$pKd,previsao3$net.result)
RNrrse3 = rrse(previsao3$net.result,testeData$pKd)
RNrmse3
cor(testeData$pKd,previsao3$net.result,method = "pearson")
RNrrse3
qplot(testeData$pKd,previsao3$net.result, col=ifelse(abs(testeData$pKd-previsao3$net.result) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
f3<- as.formula("pKd ~ EState_VSA1+MolLogP+I+pKd+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180")
rn3 <- neuralnet(f3,
treinoData,
threshold = 0.1,
hidden = c(50,50))
previsao3 = compute(rn3,testeData)
RNrmse3 = rmse(testeData$pKd,previsao3$net.result)
RNrrse3 = rrse(previsao3$net.result,testeData$pKd)
RNrmse3
cor(testeData$pKd,previsao3$net.result,method = "pearson")
RNrrse3
qplot(testeData$pKd,previsao3$net.result, col=ifelse(abs(testeData$pKd-previsao3$net.result) < 0.01,"red","blue"),  ylab = "Valores preditos pelo modelo",
xlab = "Valores do testeData",show.legend=FALSE) + geom_abline(intercept = 0, slope = 1)
modelo7 = train(pKd ~ EState_VSA1+MolLogP+I+pKd+F23+VSA_EState1+F24+F30+S+PEOE_VSA3+G+NN61+F25+F33+NN11+F2+M+NN174+H+Y+EState_VSA8+F48+D10+D+A+T+D32+NN5+F+D34+W+NN77+D6+F20+S2+SMR_VSA3+F28+VSA_EState3+S8+F35+NN161+S5+Q+VSA_EState2+R+VSA_EState7+D28+NN25+NN115+N+P+S10+K+F49+SMR_VSA6+F4+F19+D12+C+Chi4n+S1+SlogP_VSA7+Kappa1+D8+E+NN28+NN163+NN30+S7+VSA_EState4+F41+F10+D30+L+VSA_EState9+NN180, data = treinoData, method = "enet")
teste7 = predict(modelo7, testeData)
rmse7 = rmse(testeData$pKd,teste7)
rrse7 = rrse(teste7,testeData$pKd)
rmse7
cor(testeData$pKd,teste7,method = "pearson")
rrse7
entrada3 = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//pca.csv', sep=";")
View(entrada3)
entrada3 = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//pca2.csv', sep=";")
#install.packages("kernlab")
#install.packages("Metrics")
#install.packages("esquisse")
#install.packages("monomvn")
#install.packages("leaps")
library(neuralnet)
library(caret)
library(rpart)
library(rpart.plot)
library(foreign)
library(mlbench)
library(randomForest)
library(kernlab)
library(Metrics)
library(esquisse)
library(elasticnet)
library(monomvn)
library(ggplot2)
library(leaps)
library(parallel)
library(iterators)
library(foreach)
set.seed(101)
proporcao=0.8
random = createDataPartition(entrada3$pKd,p=proporcao,list=FALSE)
set.seed(101)
proporcao=0.8
random = createDataPartition(entrada3$pKd,p=proporcao,list=FALSE)
entrada3 = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//pca2.csv', sep=";")
set.seed(101)
proporcao=0.8
random = createDataPartition(entrada3$pKd,p=proporcao,list=FALSE)
treinoData2 =  entrada3[random,]
testeData2 =  entrada3[-random,]
entrada = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//pca2.csv', sep=";")
entrada3 = read.csv('C://Users//Balboni//Desktop//Mestrado//Aulas//Mineração de dados//R//TarefaFinal//Envio//Datasets//pca2.csv', sep=";")
set.seed(100)
proporcao=0.8
random = createDataPartition(entrada3$pKd,p=proporcao,list=FALSE)
#install.packages("kernlab")
#install.packages("Metrics")
#install.packages("esquisse")
#install.packages("monomvn")
#install.packages("leaps")
library(neuralnet)
library(caret)
library(rpart)
library(rpart.plot)
library(foreign)
library(mlbench)
library(randomForest)
library(kernlab)
library(Metrics)
library(esquisse)
library(elasticnet)
library(monomvn)
library(ggplot2)
library(leaps)
library(parallel)
library(iterators)
library(foreach)
set.seed(100)
proporcao=0.8
random = createDataPartition(entrada3$pKd,p=proporcao,list=FALSE)
treinoData2 =  entrada3[random,]
testeData2 =  entrada3[-random,]
modelo2 = train(pKd ~ ., data = treinoData2, method = "svmLinear")
View(entrada3)
modelo2 = train(pKd ~ ., data = treinoData2, method = "svmLinear")
#install.packages("kernlab")
#install.packages("Metrics")
#install.packages("esquisse")
#install.packages("monomvn")
#install.packages("leaps")
library(neuralnet)
library(caret)
library(rpart)
library(rpart.plot)
library(foreign)
library(mlbench)
library(randomForest)
library(kernlab)
library(Metrics)
library(esquisse)
